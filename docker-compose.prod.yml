version: '3.8'

services:
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: linkedin_ai_prod
      POSTGRES_USER: linkedin_ai
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U linkedin_ai"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - linkedin_ai_network

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - linkedin_ai_network
    volumes:
      - redis_data:/data

  web:
    build:
      context: .
      dockerfile: Dockerfile.prod
    ports:
      - "4000:4000"
    environment:
      - MIX_ENV=prod
      - DATABASE_URL=postgresql://linkedin_ai:${DB_PASSWORD}@db:5432/linkedin_ai_prod
      - REDIS_URL=redis://redis:6379/0
      - PHX_SERVER=true
    env_file:
      - .env.prod
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - linkedin_ai_network
    volumes:
      - app_logs:/app/logs

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - web
    restart: unless-stopped
    networks:
      - linkedin_ai_network

  # Background job processing
  worker:
    build:
      context: .
      dockerfile: Dockerfile.prod
    environment:
      - MIX_ENV=prod
      - DATABASE_URL=postgresql://linkedin_ai:${DB_PASSWORD}@db:5432/linkedin_ai_prod
      - REDIS_URL=redis://redis:6379/0
    env_file:
      - .env.prod
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    command: ["/app/bin/linkedin_ai", "eval", "LinkedinAi.Release.start_workers()"]
    networks:
      - linkedin_ai_network

  # Monitoring and observability
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - linkedin_ai_network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    restart: unless-stopped
    networks:
      - linkedin_ai_network

volumes:
  postgres_data:
  redis_data:
  app_logs:
  nginx_logs:
  prometheus_data:
  grafana_data:

networks:
  linkedin_ai_network:
    driver: bridge